---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
    create database if not exists grades;
    use grades;
    
    create table grades (
        grade_id int NOT NULL AUTO_INCREMENT,
        user_id varchar(50) NOT NULL,
        course1 int not null,
        course2 int,
        course3 iNT,
        course4 int,
        course5 int,
        primary key (grade_id)
    );
    
    Insert into grades values
    (NULL,'Steven',90,80,70,60,50);

---
# deployment for mysql
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: mysql
        image: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flask-secrets
              key: db_root_password
        ports:
          - containerPort: 3306
            name: db-container
        volumeMounts:
          - name: mysql-initdb
            mountPath: /docker-entrypoint-initdb.d
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: db
spec:
  ports:
  - port: 3306
    protocol: TCP
    name: mysql
  selector:
    app: db
  type: NodePort